{
    "results": [
        {
            "directory": "/Users/shreyanshrai/Desktop/tidbtestfolder",
            "files": [
                {
                    "path": "/Users/shreyanshrai/Desktop/tidbtestfolder/Cat.jpeg",
                    "type": ".jpeg",
                    "caption": "there is a cat that is jumping in the air with its paws",
                    "ocr_text": "",
                    "embeddings": {
                        "caption": {
                            "embeddings": [
                                [
                                    81,
                                    248,
                                    24,
                                    238,
                                    154,
                                    161,
                                    169,
                                    54,
                                    225,
                                    81,
                                    21,
                                    127,
                                    119,
                                    233,
                                    13,
                                    1,
                                    84,
                                    109,
                                    42,
                                    85,
                                    153,
                                    97,
                                    23,
                                    137,
                                    177,
                                    115,
                                    184,
                                    221,
                                    241,
                                    182,
                                    205,
                                    191,
                                    161,
                                    209,
                                    74,
                                    132,
                                    198,
                                    225,
                                    109,
                                    54,
                                    180,
                                    239,
                                    249,
                                    4,
                                    55,
                                    171,
                                    169,
                                    138,
                                    185,
                                    142,
                                    151,
                                    247,
                                    74,
                                    142,
                                    216,
                                    140,
                                    168,
                                    146,
                                    28,
                                    108,
                                    82,
                                    127,
                                    111,
                                    21,
                                    253,
                                    150,
                                    32,
                                    240,
                                    85,
                                    235,
                                    80,
                                    222,
                                    2,
                                    189,
                                    160,
                                    40,
                                    209,
                                    50,
                                    11,
                                    206,
                                    169,
                                    235,
                                    84,
                                    0,
                                    246,
                                    162,
                                    73,
                                    133,
                                    130,
                                    58,
                                    231,
                                    78,
                                    32,
                                    34,
                                    196,
                                    204,
                                    206,
                                    175,
                                    52,
                                    222,
                                    146,
                                    138,
                                    146,
                                    121,
                                    250,
                                    69,
                                    29,
                                    76,
                                    58,
                                    110,
                                    212,
                                    187,
                                    207,
                                    136,
                                    248,
                                    140,
                                    119,
                                    39,
                                    16,
                                    177,
                                    8,
                                    72,
                                    74,
                                    153,
                                    170,
                                    3,
                                    63,
                                    188
                                ]
                            ]
                        },
                        "ocr": {
                            "embeddings": [
                                [
                                    11,
                                    233,
                                    0,
                                    92,
                                    24,
                                    176,
                                    174,
                                    144,
                                    219,
                                    70,
                                    213,
                                    251,
                                    95,
                                    105,
                                    156,
                                    241,
                                    12,
                                    79,
                                    197,
                                    65,
                                    69,
                                    171,
                                    241,
                                    167,
                                    82,
                                    89,
                                    34,
                                    111,
                                    93,
                                    255,
                                    20,
                                    77,
                                    83,
                                    88,
                                    26,
                                    29,
                                    198,
                                    69,
                                    109,
                                    189,
                                    70,
                                    143,
                                    25,
                                    229,
                                    183,
                                    130,
                                    181,
                                    163,
                                    212,
                                    10,
                                    173,
                                    134,
                                    119,
                                    172,
                                    154,
                                    193,
                                    41,
                                    234,
                                    202,
                                    189,
                                    208,
                                    115,
                                    77,
                                    132,
                                    101,
                                    151,
                                    8,
                                    128,
                                    57,
                                    83,
                                    192,
                                    175,
                                    16,
                                    185,
                                    180,
                                    40,
                                    190,
                                    38,
                                    48,
                                    220,
                                    143,
                                    159,
                                    13,
                                    224,
                                    176,
                                    98,
                                    238,
                                    125,
                                    20,
                                    36,
                                    189,
                                    78,
                                    27,
                                    5,
                                    38,
                                    153,
                                    233,
                                    186,
                                    31,
                                    29,
                                    177,
                                    166,
                                    167,
                                    238,
                                    202,
                                    4,
                                    223,
                                    164,
                                    138,
                                    118,
                                    5,
                                    147,
                                    15,
                                    235,
                                    222,
                                    8,
                                    119,
                                    255,
                                    179,
                                    215,
                                    11,
                                    242,
                                    150,
                                    28,
                                    19,
                                    195,
                                    198,
                                    60
                                ]
                            ]
                        },
                        "combined": {
                            "embeddings": [
                                [
                                    81,
                                    248,
                                    24,
                                    238,
                                    154,
                                    161,
                                    169,
                                    54,
                                    225,
                                    81,
                                    21,
                                    127,
                                    119,
                                    233,
                                    13,
                                    1,
                                    84,
                                    109,
                                    42,
                                    85,
                                    153,
                                    97,
                                    23,
                                    137,
                                    177,
                                    115,
                                    184,
                                    221,
                                    241,
                                    182,
                                    205,
                                    191,
                                    161,
                                    209,
                                    74,
                                    132,
                                    198,
                                    225,
                                    109,
                                    54,
                                    180,
                                    239,
                                    249,
                                    4,
                                    55,
                                    171,
                                    169,
                                    138,
                                    185,
                                    142,
                                    151,
                                    247,
                                    74,
                                    142,
                                    216,
                                    140,
                                    168,
                                    146,
                                    28,
                                    108,
                                    82,
                                    127,
                                    111,
                                    21,
                                    253,
                                    150,
                                    32,
                                    240,
                                    85,
                                    235,
                                    80,
                                    222,
                                    2,
                                    189,
                                    160,
                                    40,
                                    209,
                                    50,
                                    11,
                                    206,
                                    169,
                                    235,
                                    84,
                                    0,
                                    246,
                                    162,
                                    73,
                                    133,
                                    130,
                                    58,
                                    231,
                                    78,
                                    32,
                                    34,
                                    196,
                                    204,
                                    206,
                                    175,
                                    52,
                                    222,
                                    146,
                                    138,
                                    146,
                                    121,
                                    250,
                                    69,
                                    29,
                                    76,
                                    58,
                                    110,
                                    212,
                                    187,
                                    207,
                                    136,
                                    248,
                                    140,
                                    119,
                                    39,
                                    16,
                                    177,
                                    8,
                                    72,
                                    74,
                                    153,
                                    170,
                                    3,
                                    63,
                                    188
                                ]
                            ]
                        }
                    }
                },
                {
                    "path": "/Users/shreyanshrai/Desktop/tidbtestfolder/1 dog.jpeg",
                    "type": ".jpeg",
                    "caption": "arafed dog standing on a blue background with its tongue out",
                    "ocr_text": "",
                    "embeddings": {
                        "caption": {
                            "embeddings": [
                                [
                                    19,
                                    213,
                                    17,
                                    203,
                                    10,
                                    128,
                                    240,
                                    150,
                                    199,
                                    129,
                                    205,
                                    245,
                                    237,
                                    64,
                                    148,
                                    99,
                                    128,
                                    45,
                                    177,
                                    213,
                                    217,
                                    241,
                                    91,
                                    69,
                                    212,
                                    219,
                                    0,
                                    223,
                                    57,
                                    94,
                                    57,
                                    156,
                                    67,
                                    193,
                                    42,
                                    223,
                                    129,
                                    107,
                                    13,
                                    92,
                                    234,
                                    135,
                                    159,
                                    69,
                                    118,
                                    162,
                                    41,
                                    235,
                                    184,
                                    254,
                                    129,
                                    87,
                                    67,
                                    159,
                                    17,
                                    195,
                                    104,
                                    226,
                                    188,
                                    135,
                                    75,
                                    248,
                                    125,
                                    147,
                                    253,
                                    31,
                                    129,
                                    86,
                                    21,
                                    163,
                                    116,
                                    238,
                                    19,
                                    241,
                                    196,
                                    104,
                                    209,
                                    54,
                                    44,
                                    194,
                                    168,
                                    220,
                                    48,
                                    19,
                                    122,
                                    129,
                                    187,
                                    60,
                                    135,
                                    106,
                                    143,
                                    156,
                                    77,
                                    98,
                                    52,
                                    13,
                                    136,
                                    140,
                                    86,
                                    31,
                                    182,
                                    138,
                                    71,
                                    248,
                                    82,
                                    96,
                                    21,
                                    147,
                                    162,
                                    94,
                                    164,
                                    147,
                                    215,
                                    171,
                                    26,
                                    137,
                                    111,
                                    85,
                                    163,
                                    177,
                                    12,
                                    112,
                                    84,
                                    131,
                                    251,
                                    27,
                                    15,
                                    57
                                ]
                            ]
                        },
                        "ocr": {
                            "embeddings": [
                                [
                                    11,
                                    233,
                                    0,
                                    92,
                                    24,
                                    176,
                                    174,
                                    144,
                                    219,
                                    70,
                                    213,
                                    251,
                                    95,
                                    105,
                                    156,
                                    241,
                                    12,
                                    79,
                                    197,
                                    65,
                                    69,
                                    171,
                                    241,
                                    167,
                                    82,
                                    89,
                                    34,
                                    111,
                                    93,
                                    255,
                                    20,
                                    77,
                                    83,
                                    88,
                                    26,
                                    29,
                                    198,
                                    69,
                                    109,
                                    189,
                                    70,
                                    143,
                                    25,
                                    229,
                                    183,
                                    130,
                                    181,
                                    163,
                                    212,
                                    10,
                                    173,
                                    134,
                                    119,
                                    172,
                                    154,
                                    193,
                                    41,
                                    234,
                                    202,
                                    189,
                                    208,
                                    115,
                                    77,
                                    132,
                                    101,
                                    151,
                                    8,
                                    128,
                                    57,
                                    83,
                                    192,
                                    175,
                                    16,
                                    185,
                                    180,
                                    40,
                                    190,
                                    38,
                                    48,
                                    220,
                                    143,
                                    159,
                                    13,
                                    224,
                                    176,
                                    98,
                                    238,
                                    125,
                                    20,
                                    36,
                                    189,
                                    78,
                                    27,
                                    5,
                                    38,
                                    153,
                                    233,
                                    186,
                                    31,
                                    29,
                                    177,
                                    166,
                                    167,
                                    238,
                                    202,
                                    4,
                                    223,
                                    164,
                                    138,
                                    118,
                                    5,
                                    147,
                                    15,
                                    235,
                                    222,
                                    8,
                                    119,
                                    255,
                                    179,
                                    215,
                                    11,
                                    242,
                                    150,
                                    28,
                                    19,
                                    195,
                                    198,
                                    60
                                ]
                            ]
                        },
                        "combined": {
                            "embeddings": [
                                [
                                    19,
                                    213,
                                    17,
                                    203,
                                    10,
                                    128,
                                    240,
                                    150,
                                    199,
                                    129,
                                    205,
                                    245,
                                    237,
                                    64,
                                    148,
                                    99,
                                    128,
                                    45,
                                    177,
                                    213,
                                    217,
                                    241,
                                    91,
                                    69,
                                    212,
                                    219,
                                    0,
                                    223,
                                    57,
                                    94,
                                    57,
                                    156,
                                    67,
                                    193,
                                    42,
                                    223,
                                    129,
                                    107,
                                    13,
                                    92,
                                    234,
                                    135,
                                    159,
                                    69,
                                    118,
                                    162,
                                    41,
                                    235,
                                    184,
                                    254,
                                    129,
                                    87,
                                    67,
                                    159,
                                    17,
                                    195,
                                    104,
                                    226,
                                    188,
                                    135,
                                    75,
                                    248,
                                    125,
                                    147,
                                    253,
                                    31,
                                    129,
                                    86,
                                    21,
                                    163,
                                    116,
                                    238,
                                    19,
                                    241,
                                    196,
                                    104,
                                    209,
                                    54,
                                    44,
                                    194,
                                    168,
                                    220,
                                    48,
                                    19,
                                    122,
                                    129,
                                    187,
                                    60,
                                    135,
                                    106,
                                    143,
                                    156,
                                    77,
                                    98,
                                    52,
                                    13,
                                    136,
                                    140,
                                    86,
                                    31,
                                    182,
                                    138,
                                    71,
                                    248,
                                    82,
                                    96,
                                    21,
                                    147,
                                    162,
                                    94,
                                    164,
                                    147,
                                    215,
                                    171,
                                    26,
                                    137,
                                    111,
                                    85,
                                    163,
                                    177,
                                    12,
                                    112,
                                    84,
                                    131,
                                    251,
                                    27,
                                    15,
                                    57
                                ]
                            ]
                        }
                    }
                },
                {
                    "path": "/Users/shreyanshrai/Desktop/tidbtestfolder/.DS_Store",
                    "type": "",
                    "caption": "",
                    "ocr_text": "",
                    "embeddings": {}
                },
                {
                    "path": "/Users/shreyanshrai/Desktop/tidbtestfolder/prisacari-ics13-optimal_alltoall_fat-tree.pdf",
                    "type": ".pdf",
                    "caption": "",
                    "ocr_text": "Bandwidth-optimal All-to-all Exchanges in Fat Tree Networks Bogdan Prisacari IBM Research bpr@zurich.ibm.comGerman Rodriguez IBM Research rod@zurich.ibm.com Cyriel Minkenberg IBM Research sil@zurich.ibm.comTorsten Hoe\ufb02er ETH Zurich htor@inf.ethz.ch ABSTRACT The personalized all-to-all collective exchange is one of the most challenging communication patterns in HPC applica- tions in terms of performance and scalability. In the context of the fat tree family of interconnection networks, widely used in current HPC systems and datacenters, we show that there is potential for optimizing this tra\ufb03c pattern by de- riving a tight theoretical lower bound for the bandwidth needed in the network to support such communication in a non-contending way. Current state of the art methods re- quire up to twice as much bisection bandwidth as this theo- retical minimum. We propose a set of optimized exchanges that use exactly the minimum amount of resources and ex- hibit close to ideal performance. This enables cost-e\ufb00ective networks, i.e., with as little as half the bisection bandwidth required by current state of the art methods, to exhibit quasi optimal performance under all-to-all tra\ufb03c. In addition to supporting our claims by mathematical proofs, we include simulation results that con\ufb01rm their correctness in practical system con\ufb01gurations. Categories and Subject Descriptors C.2.1 [Computer-Communication Networks ]: Network Architecture and Design\u2014 Network communications Keywords all-to-all; fat tree networks; bandwidth optimality 1. INTRODUCTION AND MOTIV ATION Today\u2019s parallel computations are often arranged in a bulk synchronous programming (BSP) model [36] in which com- munication and computation steps alternate. For example, in the Message Passing Model as implemented by MPI [25], one can realize communication steps by sending messages between processes. Several common communication pat- Permission to make digital or hard copies of all or part of this w ork for personal or classroom use is granted without fee provided th at copies are not made or distributed for pro\ufb01t or commercial advantage and th at copies bear this notice and the full citation on the \ufb01rst page. To cop y otherwise, to republish, to post on servers or to redistribute to lists, re quires prior speci\ufb01c permission and/or a fee. ICS\u201913, June 10\u201314, 2013, Eugene, Oregon, USA. Copyright 2013 ACM 978-1-4503-2130-3/13/06 ...$15.00.terns, such as broadcast, are available as collective com- munications in MPI. This high-level speci\ufb01cation enables a clean separation of concerns between the algorithm, that requires certain semantics, and the network architecture, that implements communication. This enables performance- portability of programs to a wide variety of di\ufb00erent ar- chitectures and systems. Indeed, a collective programming model has enormous bene\ufb01ts for programmability as well as performance [9] and is thus also adopted by many other parallel programming environments [2, 21]. Of those collective communications, all-to-all is certainly the most demanding operation for the network because it needs to move \u2126( p) data between pprocesses; it is thus also often considered the least scalable of MPI\u2019s collective op- erations [3]. Yet, there are many applications that require this communication pattern: Spectral codes, such as Direct Numerical Simulation [23] perform a 3D Fast Fourier Trans- form, utilizing large all-to-all communications for transpos- ing the y direction over the network together with shared- memory on-node transforms of the x direction [6]. Even at the other end of the spectrum of scienti\ufb01c applications, data-driven parallel graph computations, such as between- ness centrality, essentially perform full all-to-all exchanges over the network [37]. All-to-all has thus been the subject of multiple research e\ufb00orts optimizing it for di\ufb00erent theoretical network mod- els, such as LogP [29] or Postal [4], or technologies, such as In\ufb01niBand [19] or Myrinet [39]. Our approach, however, is mostly oblivious to the network technology and current the- oretical network models because we optimize for a certain network topology . One important topology today is the family of fat trees [17], which form the base of several Petascale com- puter architectures (e.g., [38]). Fat trees con be con\ufb01gured in terms of bandwidth, rack layout, and cost. At the heart of the cost/performance trade-o\ufb00, and thus a critical deci- sion in supercomputer design, is the number of resources towards the root, which determines the bisection bandwidth . As computations requiring all-to-all exchanges are impor- tant, and as it is commonly believed that all-to-all band- width is bounded by the bisection bandwidth (cf. [16]), most fat tree networks are designed with full bisection bandwidth. In this paper, we show that all-to-all only requires half bisection bandwidth due to its inherent locality. We then demonstrate how to design slimmed fat trees that have op- timal cost while still providing full all-to-all bandwidth and 0 0 0 0 8 8 8 80 1 2 3 4 5 6 7Phase 0 Phase 1 Phase 2 Phase 3 Phase 4 Phase 5 Phase 6 Phase 7 Figure 1: XOR exchange pattern between 8com- municating tasks. The \ufb01rst half of the phases are local and no tra\ufb03c crosses the network bisection (horizontal line), whereas during the last half of the phases, all the messages cross the bisection (con- tinuous lines). This requires a bisection bandwidth equal to the aggregate injection bandwidth. how to schedule all-to-all communications on general trees optimally. The main contributions of our work are: \u2022A general discussion of locality in the all-to-all prob- lem. \u2022A construction of cost-optimal fat trees delivering full all-to-all bandwidth. \u2022An algorithm to compute optimal exchange patterns for a given fat tree. We start with a description of the locality within all-to-all and intuitive examples for mappings to fat trees. We then present generic lower bounds for all-to-all communications on fat trees followed by a construction of optimal all-to-all schedules. We conclude our study with a set of simulated real-world examples. 2. THE ALL-TO-ALL PROBLEM In this section we will discuss the intuition behind the bounds for all-to-all. The full proof and the algorithm to compute the send permutations for a given fat tree will be presented in Sections 3.1 and 3.4. All-to-all is often referred to as\u201cbisection-bound\u201d(cf.[16]). While this is true asymptotically, i.e., a full-bandwidth all- to-all requires a \u2126( p) bisection bandwidth on pprocesses, we will show that it only requires half of the actual bisection bandwidth if one can take advantage of the inherent locality of the all-to-all problem . Consider an all-to-all schedule where each process p\u2208P exchanges a single message with each other process. Let P1 andP2form an arbitrary bisection of the process set P, such thatb=|P1|=|P2|=|P| 2. In an all-to-all, each process in the set P1hasbpeers in P1andbpeers in P2, such that onlyb=|P| 2exchanges leave each set. If P1andP2were arbitrary bisections of processes mapped to endpoints in an arbitrary topology, then only half of the messages cross any bisection of this topology. Thus, intuitively, all-to-all ex- changes require only half bisection bandwidth for arbitrary topologies. The argument can be applied recursively, i.e., partition- ingP1intoP11andP12etc., yielding a bandwidth-minimal construction. We now demonstrate that current all-to-all al- gorithms do not take advantage of this observation and thus require full bisection bandwidth for a full-bandwidth all-to- all. We then show how to utilize our observation by opti- mally scheduling all-to-all communications such that they0 2 4 6 8 6 4 20 1 2 3 4 5 6 7Phase 0 Phase 1 Phase 2 Phase 3 Phase 4 Phase 5 Phase 6 Phase 7 Figure 2: Linear exchange pattern between 8com- municating tasks for shift = 0 . The uneven distri- bution of the number of messages (continuous lines) crossing the network bisection requires a bisection bandwidth equal to the aggregate injection band- width to enable contention-free tra\ufb03c in all phases. require only half bisection bandwidth and cause less conges- tion than today\u2019s algorithms. A typical [40] way of performing an all-to-all exchange between Nprocesses or tasks, especially when there is no possibility of message aggregation (such as is the case for large messages), is to schedule the exchange as a set of N phases. Every process sends a single message and receives a single message in each phase (we consider that a process sends a message to itself as well). In this case, the exchange pattern can be entirely de\ufb01ned by a function that maps a given phase pand source task sto a unique destination task d(all three numbered from 0 to N\u22121), meaning that during phase p, the message sent by task sis destined to task d. The two widely used exchange patterns are the binary XOR exchange and the linear shift exchange [40]. In the case of XOR (Figure 1), the function is dXOR= sXOR p, where the exclusive or operation is performed bit by bit on the binary representations of sandp. In the case of the linear shift exchange [30] (Figure 2), the function is dLIN= (s+p+shift) mod N, where Nis the total number of communicating tasks and shift is a parameter that takes a constant integer value between 0 and N\u22121. If we partition the 8 nodes in the example all-to-all in the two equal halves separated by the horizontal median line it is obvious that both exchanges exhibit an uneven distribu- tion of the amount of tra\ufb03c traversing this bisection of the network across the di\ufb00erent phases, with a peak required bisection bandwidth, in both cases, equal to the aggregate injection bandwidth. Looking at the two examples, it is equally obvious that the average number of messages crossing the bisection as we have de\ufb01ned it in every phase is only half the total number of communicating tasks. Furthermore, there is a way to ensure that in every phase no more than this average number of messages crosses the bisection (Figure 3). This makes it possible to have uncontended per phase tra\ufb03c with only half the full bisection bandwidth. We will show in the following sections that the observa- tions for this small example hold in general. We will prove tight lower bounds on the bandwidth required for uncon- tended all-to-all tra\ufb03c. Furthermore, for fat tree networks in particular we will introduce a bandwidth-optimized ex- change pattern that satis\ufb01es these bounds. 3. ALL-TO-ALL OPTIMIZATION First, we de\ufb01ne the model of the interconnection network we are considering, the fat tree network. Fat trees are one of the most popular indirect network topologies used in current supercomputers. The term fat tree has been used to refer to a broad class of di\ufb00erent interconnection layouts. All fat trees can be described as a multi-stage tree-like topology where the width (bandwidth) of the connections increases towards the root of the tree. Anideal fat tree would be a single binary tree intercon- nection network where the bandwidth of each link towards the root can always accommodate the aggregate capacity of the sub-tree connected to that link. These ideal fat tree net- works are not realizable for large clusters, as the bandwidth needs to double at each level towards the root, which would require switches with either exponentially increasing num- ber of ports or exponentially increasing bandwidth per link. The CM-5 [17] was the \ufb01rst machine to implement a variant of the ideal fat tree network. However, it is possible to construct a tree-like network with an equivalent link bandwidth property by using \ufb01xed- radix switches, i.e., without increasing the number of con- nections per switch or their bandwidth [28, 27]. It is further- more possible to construct networks [26] where the band- width towards the root can be tuned to almost arbitrary values, from the full-bisection bandwidth characteristic of ideal fat-trees to reduced bandwidth realizations that have a correspondingly reduced cost. We will discuss these and other practical implications of our method in Section 4. For the time being, we will assume the following fat-tree model. We consider a layered single rooted tree structure that is homogeneous in that every node on a given layer has the same number of descendants. Using a notation similar to [26], we denote by FT(L;M1, M2, ..., M L) a tree of L+1 consecutively numbered layers, with 0 being the layer of the leaves and Lthat of the single root. Given a layer l,Ml then denotes the number of descendants that every node on layer lhas. The tasks that send and receive messages are located at the leaf nodes, whereas the nodes on the other levels serve as message routers. We will assume a single task per node (The case where several tasks are present on the same node is equivalent to extending the fat tree with an additional leaf level, where every leaf corresponds to a task). Furthermore, we will assume that every upward link starting on a node on a given layer has a \ufb01xed bandwidth dependent only on the layer index. In the context of this abstract model of the network, we will now prove that the requirement of uncontended all-to-all tra\ufb03c induces a tight lower bound on the bandwidth of every fat tree link. 3.1 Bandwidth-optimal link occupation in all- to-all communication over a fat tree Given a fat tree FT(L;M1, ..., M L) de\ufb01ned as above, we will show in this section that uncontended all-to-all tra\ufb03c requires that every upward link originating on a layer lnode as well as every downward link ending on a layer lnode needs to be able to accommodate at least Bmin(l) messages, with: Bmin(l) =M1\u00b7M2\u00b7...\u00b7Ml\u2212\u2014M1\u00b7M2\u00b7...\u00b7Ml Ml+1\u00b7Ml+2\u00b7...\u00b7ML/cwm .(1) To this end, we denote by \u03a0 lthe product M1\u00b7M2\u00b7...\u00b7Ml. Given that every leaf node corresponds to a single task, the total number of tasks is N= \u03a0 L. Let us consider one of the nodes on level l, denoted by \u00b5. The total number of messages originating from layer 0 descendants of this node4 4 4 4 4 4 4 40 1 2 3 4 5 6 7Phase 0 Phase 1 Phase 2 Phase 3 Phase 4 Phase 5 Phase 6 Phase 7 Figure 3: Optimized exchange pattern obtained for a fat tree with 2levels and with M2= 2andM1= 4. The link occupation optimization ensures that in ev- ery phase exactly half of the messages (continuous lines) cross the network bisection, thus making con- tention free tra\ufb03c possible with only half the full bisection bandwidth. during the all-to-all exchange is equal to the number of such descendants (which equals \u03a0 l) multiplied by the total num- ber of destinations (which equals \u03a0 L). Out of these \u03a0 L destinations, \u03a0 lare located in the subtree rooted in \u00b5and thus messages destined to these \u201clocal\u201d tasks need notbe routed on the link going upward from \u00b5. All messages des- tined to the other tasks, located outside the subtree rooted in\u00b5,mustbe routed on \u00b5\u2019s upward link. Consequently, dur- ing the complete all-to-all exchange, the number of messages passing through the upward link originating on any node on levellequals U(l) = \u03a0 l\u00b7(\u03a0L\u2212\u03a0l). As the exchange comprises \u03a0 Lphases, the average per- phase number of messages passing through the upward link originating on a given node on level ltherefore equals U(l) = \u03a0l\u00b7\u201c 1\u2212\u03a0l \u03a0L\u201d Given an arbitrary exchange pattern and an arbitrary phase of that exchange, the maximum number of messages passing through an upward link at level lis equal to or greater than U(l). This is equivalent to saying that at least one link will have U(l) or more messages passing through it in that phase. Thus, a prerequisite for uncontended single- phase tra\ufb03c is to provide every upward link with su\ufb03cient bandwidth to transfer at least this number of messages. As such, contention-free tra\ufb03c imposes a lower bound of\u02da U(l)\u02c7 on the number of messages that every upward link starting on a layer lnode must be able to accommodate, bound that is equal to Bmin(l) as de\ufb01ned in Equation (1). Through a similar analysis, we can compute the mini- mum bandwidth necessary on downward links. Considering again one arbitrary node \u00b5on level l, the total number of messages destined to level 0 descendants of this node dur- ing the entire exchange is equal to \u03a0 l\u00b7\u03a0L. Out of the \u03a0Lsources of these messages, \u03a0 lare located in the sub- tree rooted in \u00b5and thus none of the messages originating from them traverse the downward link ending in \u00b5. Conse- quently, during the complete exchange, the number of mes- sages passing through the downward link ending on any node on level lequals D(l) = \u03a0 l\u00b7(\u03a0L\u2212\u03a0l), which leads to an average per-phase number of downward messages equal to D(l) = \u03a0 l\u00b7\u201c 1\u2212\u03a0l \u03a0L\u201d . Applying the same argument as before, we conclude that every downward link ending on a layer lnode must be able to accommodate at least\u02da D(l)\u02c7 messages, which is again exactly equal to Bmin(l) de\ufb01ned in Equation (1). Next, we will introduce an exchange pattern that requires no more than this minimum capacity, thus e\ufb00ectively prov- ing that the bounds are tight. We will start by intuitively explaining the construction of the new pattern, then proceed to rigorously de\ufb01ne it and prove its optimality. 3.2 Intuitive bandwidth-optimal exchange Let us consider the example all-to-all exchange among 8 tasks presented in Section 2on a FT(2; 4,2) topology. For simplicity, let\u2019s start by optimizing the load induced by all tasks, on the two upward links ending in the root node. As shown in Section 3.1, the key to optimizing bandwidth utilization is to balance the load on each link across all phases. Obtaining a bandwidth utilization of Bminacross all phases is only possible if every phase exhibits this uti- lization. In our speci\ufb01c example, we are interested in Bmin(1) = M1\u2212 \u230aM1/M2\u230b= 2. Thus, we must \ufb01nd a way to ensure that an arbitrary upward link ending on the root is used by exactly two messages in each phase. One way to achieve this is for every source task sto choose in any two consecutive phases a destination that is in the same layer 1 subtree as itself and a destination that is in the other layer 1 subtree. However, this is not enough, as all 4 tasks in a sub- tree could all choose to send messages outside of the subtree in the same phases. Therefore it is also necessary that the source tasks belonging to the same subtree are desynchro- nized among themselves in their choice of the destination subtree. A simple subtree selection function that achieves this is (( smod 2)+( pmod 2)) mod 2. Once we have selected the subtree, we also need to ensure that the actual destina- tion within that subtree is unique over the set of sources. This can be achieved by selecting among the 4 choices in a speci\ufb01c subtree via the formula (( s/2) + ( p/2)) mod 4, where /yields the quotient of integer division. The complete destination selection function can then be de\ufb01ned as: d= (((smod 2)+( pmod 2)) mod 2) \u22174+((s/2)+(p/2)) mod 4. This exchange is illustrated in Figure 3 and it is bandwidth optimal as exactly 4 messages cross the bisection in each phase. We extend this to the general case of a FT(L;M1, ..., M L) topology using the same principles. To balance load on the highest layer links, every source will send in MLconsecutive phases to MLdi\ufb00erent subtrees. This approach is reused recursively from top to bottom. The formalization and rigorous generalization of the ap- proach follows in the next subsections. We \ufb01rst de\ufb01ne a generic family of exchanges based on a variable base repre- sentation of numbers, then proceed to select among this set an exchange that we will prove to be bandwidth-optimal. 3.3 Permuted variable base exchanges Given an ordered set of strictly positive integer num- bers (\u0398 1,\u03982, ...,\u0398K) and given a number xwith 0 \u2264x < \u03a0K k=1\u0398k, we de\ufb01ne the following notation: x= \u03a3K k=1\u201c \u03b8x k\u00b7\u03a0k\u22121 k\u2032=1\u0398k\u2032\u201d ,0\u2264\u03b8x k<\u0398k,1\u2264k\u2264K.(2) Basically, this equation de\ufb01nes a way of representing pos- itive integers in \u201dvariable base\u201d. Unlike a normal base- nrepresentation where each digit can take any value be- tween 0 and n\u22121, in this case each digit may have a di\ufb00erent range. The \u03b8kdigits de\ufb01ne a representation in base (\u0398 1,\u03982, ...,\u0398K), where the least signi\ufb01cant digit\u2019s base is \u03981. This representation, which applies solely to non-negative integers strictly smaller than \u03a0K k=1\u0398k, can be easily proven to be unique and uniquely identifying a certain value. That is to say: \u2200x, ys.t.0\u2264x, y < \u03a0K k=1\u0398k, x=y\u21d4(\u03b8x k=\u03b8y k,1\u2264k\u2264K).(3) In the context of fat trees, we will assign a variable base representation to every leaf node, and consequently, to every task. For this, we will assign tasks with indices ranging from 0 to \u03a0 L\u22121 and choose appropriate variable bases to represent those indices in. Given a fat tree FT(L;M1, ..., M L), let K=Land let (\u03981,\u03982, ...,\u0398L) = (M\u03c3(1), M\u03c3(2), ..., M \u03c3(L)), where \u03c3is an arbitrary permutation of (1 ,2, ..., L). Additionally, we de- note by \u03b1x kthe digits of an arbitrary number xin the vari- able base ( M1, M2, ..., M L). With these notations, we pro- pose the following exchange pattern, which we will refer to as apermuted-variable-base exchange pattern. Let dbe the destination of the message generated by source sin phase p. All three values s,dandpare numbers between 0 and \u03a0K k=1Mk\u22121. Then the function de\ufb01ning the pattern is: \u03b1d \u03c3(k)= (\u03b8s k+\u03b8p k) mod \u0398 k,1\u2264k\u2264K. (4) We will now show that this exchange model satis\ufb01es the two key properties of a valid all-to-all exchange pattern com- posed of phases: a source never sends to the same destina- tion twice and no two sources send to the same destination in the same phase. For the \ufb01rst property, let p1andp2be two distinct phases and let sbe a certain source. We seek to prove that in this case,d1andd2obtained with Equation (4) are distinct. Because p1andp2are positive and strictly smaller than \u03a0K k=1Mk, they have a \u03b8-representation. Furthermore, since they are distinct, according to Equation (3) there exists at least one \u02dckwith 1 \u2264\u02dck\u2264Ksuch that \u03b8p1 \u02dck/negationslash=\u03b8p2 \u02dck. According to Equation (4): \u03b8s \u02dck+\u03b8p1 \u02dck=q1\u00b7\u0398\u02dck+\u03b1d1 \u03c3(\u02dck) where q1is an integer. Given that 0\u2264\u03b8s \u02dck+\u03b8p1 \u02dck<2\u00b7\u0398\u02dck and 0\u2264\u03b1d1 \u03c3(\u02dck)<\u0398\u02dck it follows that \u2212\u0398\u02dck< q1\u00b7\u0398\u02dck<2\u00b7\u0398\u02dck. Asq1is an integer, it can only be 0 or 1. Similarly, q2has the same property. In the case where both are 0 or both are 1 (q1=q2=q), it immediately follows that \u03b1d1 \u03c3(\u02dck)/negationslash=\u03b1d2 \u03c3(\u02dck) from: \u03b8s \u02dck+\u03b8p1 \u02dck\u2212q\u00b7\u0398\u02dck=\u03b1d1 \u03c3(\u02dck) \u03b8s \u02dck+\u03b8p2 \u02dck\u2212q\u00b7\u0398\u02dck=\u03b1d2 \u03c3(\u02dck) \u03b8p1 \u02dck/negationslash=\u03b8p2 \u02dck In the case where q1is 1 and q2is 0, we obtain \u03b8p1 \u02dck\u2212\u03b8p2 \u02dck=\u03b1d1 \u03c3(\u02dck)\u2212\u03b1d2 \u03c3(\u02dck)+ \u0398\u02dck. If\u03b1d1 \u03c3(\u02dck)were equal to \u03b1d2 \u03c3(\u02dck), then \u03b8p1 \u02dck\u2212\u03b8p2 \u02dck= \u0398\u02dck, which would lead to \u03b8p1 \u02dck\u2265\u0398\u02dck, which would constitute a contra- diction. Therefore, in this case as well, \u03b1d1 \u03c3(\u02dck)must be dif- ferent from \u03b1d2 \u03c3(\u02dck). The symmetric case ( q1is 0 and q2is 1) is similar. As we proved that there exists a \u02dckfor which \u03b1d1 \u03c3(\u02dck)/negationslash=\u03b1d2 \u03c3(\u02dck), we proved that d1/negationslash=d2. The proof of the second property is similar as the com- putation of the destination task as given by Equation (4) is symmetric with respect to the phase number pand the source number s. This shows that every permutation \u03c3of (1,2, ..., L) in- duces a valid exchange pattern. However, not all of these patterns optimize the maximum tra\ufb03c traversing the up- ward links in the fat tree. In the following subsection, we will prove that the speci\ufb01c exchange pattern corresponding to\u03c3= (L, L\u22121, ...,2,1) is bandwidth-optimal. 3.4 Bandwidth-optimal exchange pattern As explained above, let (\u0398 1,\u03982, ...,\u0398L) = (M\u03c3(1), M\u03c3(2), ..., M \u03c3(L)) = (ML, ML\u22121, ..., M 1). We will prove that the bandwidth requirements induced at layer lby the variable-base-exchange corresponding to this particular base is equal to Bmin(l). We will start with the per phase bandwidth requirement per upward link. First note that all the descendants of a given node on level \u02dckshare the same \u03b1kvalues for all ksuch that\u02dck < k \u2264L. Letpbe a given phase of the all-to-all exchange. Let \u00b5be an arbitrary node at level \u02dck. The total number of messages originating in level 0 descendants of this node during phase pis \u03a0\u02dck. Among these messages, some will be destined to nodes that are descendants of \u00b5and some to nodes that are not. For a message to be destined to a descendant of \u00b5, as noted above, its destination dmust have certain \ufb01xed values for some of its \u03b1coe\ufb03cients, values that depend exclusively on the position of \u00b5. Speci\ufb01cally: \u03b1d k=\u03b1k(\u00b5),\u02dck < k \u2264L. Asdis obtained via Equation (4) this leads to: (\u03b8s L+1\u2212k+\u03b8p L+1\u2212k) mod Mk=\u03b1k(\u00b5),\u02dck < k \u2264L. As for a given p, the \u03b8representation of pis \ufb01xed, and \u03b8s L+1\u2212k,\u03b8p L+1\u2212kand\u03b1k(\u00b5) are all strictly smaller than Mk, this means that the \u03b8representation of sneeds to satisfy: \u03b8s L+1\u2212k=tk(\u00b5, p),\u02dck < k \u2264L where tk(\u00b5, p) is a set of factors independent of s. So for a descendant sof\u00b5to send a packet to another descendant of \u00b5in phase pof the exchange, the \u03b8coe\ufb03cients of sfrom rank 1 to rank L\u2212\u02dckmust all have values that depend exclusively on\u00b5andp, but not on s. According to the \u03b8representation de\ufb01nition in Equation (2), this is equivalent to:s=r(\u00b5, p) +q(s, \u00b5, p)\u00b7\u03a0L\u2212\u02dck k=1\u0398k where 0 \u2264r(\u00b5)<\u03a0L\u2212\u02dck k=1\u0398k. Thus, the only sources sthat send messages to other descendants of \u00b5are those whose index yields a \ufb01xed remainder (dependent of \u00b5andp) when divided by \u03a0L\u2212\u02dck k=1\u0398k. Because the svalues are consecutive among the descendants of \u00b5and because in total there are \u03a0\u02dcksuch descendants, the minimum number of sources that send to a destination that is also a descendant of \u00b5is: Nmin(\u02dck) =$ \u03a0\u02dck \u03a0L\u2212\u02dck k=1\u0398k% which according to the de\ufb01nition of the base is equal to: Nmin(\u02dck) =$ \u03a0\u02dck \u03a0L k=\u02dck+1Mk% . (5) The rest of the messages could potentially go outside of the subtree rooted in \u00b5. Therefore, the maximum bandwidth (in terms of number of messages) necessary on the upward link starting on any node on level \u02dckis: Bmax(\u02dck) = \u03a0 \u02dck\u2212\u2014M1\u00b7M2\u00b7...\u00b7M\u02dck M\u02dck+1\u00b7M\u02dck+2\u00b7...\u00b7ML/cwm (6) which exactly equals the value we previously found for the minimum bandwidth theoretically necessary in a fat tree for contention-free all-to-all messaging. The per-phase bandwidth requirement per downward link can be computed analogously. During a given phase, at most \u03a0 \u02dckmessages in total are sent to the \u03a0 \u02dcklevel 0 de- scendants of a node \u00b5of the fat tree on level \u02dck. It can be shown with an argument analogous to the one above that among these messages, a minimum number must originate from these same descendants, and that that minimum num- ber is equal to Nmin(\u02dck) in Equation (5). As such, by the same argument as before, we obtain the same upper bound as that given by Equation (6) for the bandwidth required on the downward links. 3.5 Discussion In this section, we have derived tight lower bounds on the bandwidth requirement of the all-to-all exchange in fat tree networks. We have also introduced an optimal exchange pattern that uses no more than the minimal bandwidth. This new exchange pattern allows for a better use of net- work resources, freeing bandwidth for other tra\ufb03c if the tree was designed with bandwidth in excess of the minimal bound, or, alternatively, allowing for reduced-cost fat trees that perform optimally under the all-to-all. Compared to a standard fat tree that o\ufb00ers full bisection bandwidth at every level, the amount of bandwidth that is left unused, or, alternatively can be removed altogether from the tree is given, for a layer llink, by \u03a0 l\u2212Bmin(l). This bandwidth surplus is largest at the top of the tree and decreases rapidly with the layer index. Nonetheless, at the highest level we can leave unused as much as1 MLof the full bisection bandwidth. Given certain conditions (speci\ufb01cally ML= 2), this means we can achieve optimal all-to-all tra\ufb03c with only half the full bisection bandwidth. Because the amount of redundant bandwidth at lower lay- ers of the tree decreases exponentially, in practice only a few top levels will allow signi\ufb01cant reduction of bandwidth us- age while some lower levels will allow no reduction at all. This, coupled with the fact that the fully optimized pattern as described above is highly intricate, leads to an interest in performing the optimization only at the levels where re- duction occurs. We have developed methods similar to the one presented above to tune the complexity of the pattern while maintaining optimality but these will be discussed in a subsequent work. 4. PRACTICAL CONSIDERATIONS In this section we will address some issues that arise from the fact that, in practice, fat tree networks are not imple- mented by means of ideal fat trees. This is because in prac- tice the exponential increase in link bandwidth that is typi- cal of multi-layered fat trees can only be achieved by means of having an exponentially increasing number of links be- tween a single pair of nodes. This in turn leads to a neces- sity of switches with a very large port count, which are not feasible. Therefore, in practice, fat tree topologies are approxi- mated by means of k-ary n-trees [28, 27] or more generally by means of Extended Generalized Fat Trees (XGFTs) [26]. These network designs o\ufb00er an alternative that only needs \ufb01xed small-radix switches and still provides many of the properties of ideal fat trees. However, the advantages come at the expense of reduced \ufb02exibility in bandwidth con\ufb01gura- tion and, more importantly, at the expense of needing more complicated routing algorithms. The following two subsections brie\ufb02y outline how the rout- ing needs to be adapted to take full advantage of the optimal exchange pattern and provide an estimate of the cost sav- ing that can be achieved by reducing the bandwidth to the theoretical lower bound for optimal all-to-all exchanges. 4.1 Routing in XGFTs In practical fat tree realizations, optimizing the exchange pattern is not su\ufb03cient to bene\ufb01t from contention-free traf- \ufb01c. The optimal exchange pattern introduced in Section 3.4 only ensures that, in each phase, the aggregate bandwidth at each fat-tree-equivalent-node of the network matches the aggregate number of messages traversing that node. This is a necessary but not a su\ufb03cient condition for contention-free message routing. In addition, the routing strategy must ensure that the messages indeed use the avail- able bandwidth evenly, i.e., it must assign con\ufb02ict-free paths for all messages in each phase. In XGFT networks, the typical way to establish minimal deadlock-free paths is simple up*/down* routing [33]. Given a (source, destination) pair, paths are constructed by rout- ing upwards to any of the Nearest Common Ancestor (NCA) nodes and then downwards to the destination. Once a spe- ci\ufb01c NCA is chosen, the routing choices from source to NCA and from NCA to destination are uniquely determined. The speci\ufb01city of a certain routing strategy then lies in the ap- proach used to select a speci\ufb01c NCA for every (source, des- tination) pair. Several tra\ufb03c-pattern-oblivious approaches exist, from random [10, 7] or adaptive [8, 20] route selection to deterministic (e.g., modulo based) approaches such as Source-mod-k[26, 17, 14] or Destination- mod-k[18, 31, 41].For complex patterns such as ours however, oblivious rout- ing can prove insu\ufb03cient. A pattern-aware routing approach takes advantage of information about the communicating pairs in a network and information about the network itself and uses it to \ufb01nd an optimized set of routes that will min- imize contention for the set of (source, destination) pairs. Pattern-aware schemes solve in some way or another a max- \ufb02ownetwork problem. A variety of approaches to achieve this are presented by Kinsy et. al [15]. Among these ap- proaches, we were able to derive optimal con\ufb02ict-free routes for the bandwidth-optimal exchange that we are proposing by means of Mixed Integer-Linear Programming. 4.2 Cost effective fat tree networks Since the optimized exchange exhibits contention free all- to-all phases in reduced bandwidth topologies, we consider the network cost savings that this exchange allows. Given an XGFT( h:m1, m2, ..., m h:w1, w2, ..., w h) [26], the number of switches necessary to build the layer lof the topology is S(l) =w1\u00b7...\u00b7wl\u00b7ml+1\u00b7...\u00b7mh. The number of bidirectional links that connect layer lto layer l\u22121 is E(l) =S(l)\u00b7ml. To simplify the analysis, consider a simple cost reduction scenario. Let\u2019s start with a full bisection bandwidth XGFT (i.e., where wl+1=ml,1\u2264l < h andw1= 1) that addi- tionally has mh= 2. This is the case we have shown to have the highest potential for bandwidth reduction. The reduced tree, XGFT\u2032(h:m1, m2, ..., m h:w1, w2, ..., w\u2032 h), has exactly the same parameters as the full bisection bandwidth tree, with the exception of w\u2032 hwhich equals wh/2. Given the properties shown above, we can see that, for 1\u2264l < h,E(l) =E\u2032(l) =E=w1\u00b7m1\u00b7...\u00b7mhandS(l) = S\u2032(l) =E/m l. For l=hwe have E(h) =E,E\u2032(h) =w1\u00b7 m1\u00b7...\u00b7mh/2 =E/2,S(h) =E/m handS\u2032(h) =E/(2mh). The saving potential in the number of switches equals 1\u2212Ph l=1S\u2032(l)Ph l=1S(l)= 1\u22121/(2mh) +Ph\u22121 l=11/ml 1/mh+Ph\u22121 l=11/ml and in the number of links equals 1\u2212Ph l=1E\u2032(l)Ph l=1E(l)= 1\u2212(h\u22121/2)\u00b7E h\u00b7E=1 2h. For typical XGFTs interconnecting 16 to 1024 leaf nodes, we can thus achieve a reduction in the number of switches of25%\u221230%and a reduction in the number of necessary links of 12%\u221216%. 5. EXPERIMENTS The following results were obtained by means of a sim- ulation framework that is able to accurately model custom networks (including XGFTs) at a \ufb02it level [22]. The simu- lator provides a high level of customization and modularity, allowing the con\ufb01guration of the desired model in detail. Several tests have been performed on XGFTs of 16, 32, 64, 128, 256, 512 and 1024 leaf nodes and up to 4 non-leaf lev- els. All these fat tree topologies had the Mparameter of the topmost level equal to two ( ML= 2) and half bisection bandwidth. Table 1 shows the exact con\ufb01gurations used. The simulations were performed using output-bu\ufb00ered switches with 4 kbytes of bu\ufb00er space per port. The links had a bandwidth of 10 Gbit/s while their latency was either Figure 4: Bisection (top level) occupation induced by XOR, LIN and OPT exchange patterns. The topology is an XGFT with ML= 2with half bisection bandwidth and total number of leaf nodes eq ual to 1024. Figure a) shows the total number of messages crossing the bisection in each ph ase, while Figure b) shows the best value for maximum link contention (in number of messages), or best contention level, that can be obtained in each phase. N Network topology 16 XGFT [3 : 4,2,2 : 1,4,1] 32 XGFT [3 : 4,4,2 : 1,4,2] 64 XGFT [3 : 8,4,2 : 1,8,2] 128 XGFT [3 : 8,8,2 : 1,8,4] 256 XGFT [4 : 8,4,4,2 : 1,8,4,2] 512 XGFT [4 : 8,8,4,2 : 1,8,8,2] 1024 XGFT [4 : 8,8,8,2 : 1,8,8,4] Table 1: Benchmarked topological con\ufb01gurations, using the notation from [26]. set to an ideal value of zero (to validate theoretical estima- tions) or to a realistic value of 100 ns (to estimate perfor- mance on real-life systems). In this same realistic latency scenario, switch traversal was considered to have a latency of 50 ns while adapter latency (the time between a message is issued in the MPI library and the time its \ufb01rst bit leaves the adapter) was set to 500 ns. Credit based \ufb02ow control was used as well as wormhole switch traversal. The messages have a constant size which, depending on the scenario, took values between 64 bytes (a single \ufb02it) and 32 kbytes, while the \ufb02it size was \ufb01xed to 64 bytes. Each acknowledgement consisted of a single \ufb02it. The tra\ufb03c pattern is that of a single all-to-all collective exchange performed by one task on each of the leaf nodes of the XGFT. The exchange is split into consecutive phases in each of which every node sends a single message and re- ceives a single message and acknowledges it. No explicit synchronization or separation of the phases is enforced. The exact structure of each phase (the set of (source, destina- tion) pairs) is de\ufb01ned according to one of three exchange models, all de\ufb01ned in Sections 2 and 3.4: \u2022XOR: the binary XOR model, \u2022LIN: the linear shift model with a shift value of 0, \u2022OPT: the optimized exchange given by Equation (4). The metric we used is that of the time necessary for the tra\ufb03c pattern to complete. However, these completion timescan amount to very di\ufb00erent values when looking at di\ufb00er- ent sized networks and even at the same network with mes- sages of di\ufb00erent size. We are not interested in how these parameters in\ufb02uence the completion time, but rather in the in\ufb02uence of the exchange pattern within each given (network size, message size) con\ufb01guration. As such, all results show the relative completion time compared to an ideal comple- tion time that we will de\ufb01ne in the following. 5.1 Ideal all-to-all performance We use the following model to compute a best-case ex- pectation for the completion time of the all-to-all exchange. Ideally, the messages travel through the network with no contention and simply incur the cumulative latency of the links, switches and adapters that they traverse. During the exchange, a given source sends M1\u00b7M2\u00b7...\u00b7Ml\u22121\u00b7(Ml\u22121) messages to sources in its layer lsubtree but not in its layer l\u22121 subtree, for every l. These messages need to \ufb01rst arrive at the root of the subtree, passing through 1 adapter, llinks andl\u22121 switches, then cross the root, then travel again through 1 adapter, llinks and l\u22121 switches to get to their destination. The cumulative latency for the entire path is thustpath(l) = 2 \u00b7tadapter + (2\u00b7l\u22121)\u00b7tswitch+ 2\u00b7l\u00b7tlink. Given a message that is made up of F\ufb02its, each of size S, and a link bandwidth of B, uncontended wormhole switch traversal ensures that the time it takes end-to-end, from message generation to message delivery, equals tpath(l)+F\u00b7 S/B. The message needs to be acknowledged, which is equiva- lent to an extra one-\ufb02it message being sent along the re- verse path. This leads to the total message time being: T(l) = 2 \u00b7tpath(l) + (F+ 1)\u00b7S/B. Given the message distribution we described above, the ideal exchange time is given by T=LX l=1M1\u00b7M2\u00b7...\u00b7Ml\u22121\u00b7(Ml\u22121)\u00b7T(l) 5.2 Ideal latency analysis and measurements To validate our simulation framework, we analyze the net- work contention induced by the three approaches when other performance limiting factors such as latency and latency- induced phase overlapping are factored out. Figure 5: Completion time comparison between the three exchan ge patterns for varying networks sizes under \ufb01xed 4KB message size (Fig. a) and for varying message size under \ufb01xed 512leaf nodes network size (Fig. b). Please note the linear scale for the y axis in a) and the logarit hmic scale for the y axis in b). The XOR exchange exhibits no contention in half of its phases, namely in the phases where messages do not reach the top level of the fat tree. In the other half, Nmessages cross the top level, but have only half bisection bandwidth available, leading to a contention level of exactly two con- \ufb02icts in every one of these N/2 phases. We de\ufb01ned the contention level as being the maximum number of messages that need to use a common link. In the case of the LIN exchange, exactly N\u2212 |2p\u2212N| messages cross the top level of the tree in phase p, leading to a contention level of 2 yet again in exactly N/2 phases (the phases where N\u2212 |2p\u2212N|> N/2). In the case of the OPT exchange, exactly N/2 messages cross the top level of the tree in every phase, leading to uncontended tra\ufb03c in every phase (Figure 4). This implies that, in absence of latency and latency- induced phase overlapping, we can estimate theoretically that OPT will have a completion time close to the optimum, while LIN and XOR will incur a doubling of the completion time of half the phases, leading to at least a 50% increase in all-to-all completion time. This is con\ufb01rmed accurately by our simulator, which yields completion times for OPT within 1% of the ideal time and completion times for XOR 50%\u221255% longer than ideal, both irrespective of the mes- sage size. LIN performs even worse, with completion times between 70% and 140% larger than ideal (the performance loss increases with both the network and the message size). This is due to additional phase overlapping induced by intra- phase di\ufb00erences in message delivery time caused by di\ufb00er- ent \ufb02ows exhibiting di\ufb00erent levels of contention (which is not the case for OPT and XOR). 5.3 Realistic latency results We performed two sets of benchmarks to predict OPT per- formance on real systems. The \ufb01rst one is aimed at studying the in\ufb02uence of the network size on the performance gain in- duced by the optimized exchange pattern. The second on the other hand studies the in\ufb02uence of the size of the ex- changed messages on the same performance gain. Figure 5 a) illustrates the relative completion time of the three exchange patterns for a \ufb01xed message size of 4 kbytes and for di\ufb00erent network sizes. We observed that in the real- istic latencies con\ufb01guration OPT managed to achieve com- pletion times less than 10% higher than ideal, surpassing XOR (which is between 15% and 35% worse than ideal) and LIN (which is between 50% and 70% worse than ideal). Theadvantage of the optimized exchange versus XOR was espe- cially strong for smaller topologies. Figure 5 b) illustrates the relative completion time of the three exchange patterns for a \ufb01xed number of 512 communi- cating tasks (and a \ufb01xed network size) and for di\ufb00erent sizes of the exchanged messages. We observed that for messages smaller than approximately 512 bytes, where the completion time is latency dominated, the optimization of the exchange doesn\u2019t help too much, because the impact of contention was small. For messages larger than this threshold, where the completion time was congestion dominated, OPT achieved an increasingly closer to ideal level of performance (reach- ing only a 2% \u22125% di\ufb00erence for very large messages), while the non-optimized exchanges became progressively worse as the message size increased, reaching as much as a 40% per- formance decrease for XOR and as much as 140% for LIN, for very large messages. This con\ufb01rms that our approach is asymptotically bandwidth optimal. 6. RELATED WORK Collective optimizations are increasingly important in large-scale high-performance computing. Thus, numerous research works deal with the optimization of collective op- erations in general and all-to-all in particular. Most tradi- tional approaches assume theoretical network models, such as the Postal model or the LogP model. Well-tuned al- gorithms exist for both models [4, 1]. However, all theo- retical models (with the notable exception of LoGPC [24], which has not been used to model all-to-all algorithms due to its complexity), do not consider the network topology and thus only optimize endpoint congestion. Our work, however, uses a simple topology-speci\ufb01c model for optimizing all-to- all communications. Our model can be combined with ex- isting network models to model endpoint congestion more accurately and can also be used as a blue-print for optimiz- ing other collectives on fat trees. However, our contribution lies in the scheduling algorithm rather than the model. Topology becomes more important with growing system size and several researchers acknowledge the fact that al- gorithms purely based on the mentioned theoretical models do not perform well on real systems. For example, Chan et al. [5] provide a general abstract framework for topology- aware collective communication. However, the abstract na- ture of this framework makes it hardly applicable to the re- cursive structure of fat trees. Zahavi et al. [42, 40] show that a particular routing function (a variant of up*/down*) guar- antees under certain placement conditions full-bandwidth all-to-all exchanges implemented using typical collective per- mutation sequences on full bisection bandwidth fat trees. We improve upon this result by a factor of two, in that our methods applied to networks with half the full bisec- tion bandwidth exhibit no or negligible decrease in perfor- mance by comparison. Sack and Gropp present a small set of topology-aware collectives for fat tree and torus networks in [32], however, in this latest work, they do not consider all- to-all and their approach of adding communication does not lead to improvements for all-to-all. In previous work [35], targeted at the implementation of optimized collectives in MPICH, the authors proposed the selection among a pool of implementations of di\ufb00erent collective algorithms depend- ing on message size and number of communicating processes, but not on any speci\ufb01c topology. Other approaches for optimizing collectives, for example, improving the lower-level send/receive primitives [19], non- blocking collectives [12, 11], or hierarchical exchanges [13, 34] are completely orthogonal to the scheduling of messages. Those techniques can use our message-scheduling algorithm for improving the bandwidth of all-to-all. 7. CONCLUSIONS The goal of this paper was to show that the current state of the art exchange patterns for the personalized all-to-all collective message exchange can be optimized in fat tree topologies to the point of using half of the bisection band- width required by previous proposals. To this end, we have derived a theoretical bound on the network link occupation that is intrinsically necessary and su\ufb03cient for any all-to-all exchange and we have shown that current approaches require as much as twice that proven optimally minimum. Further- more, we introduced a message exchange pattern that we demonstrated to be bandwidth-optimal and that thus uses exactly the minimum required amount of network resources. Finally, by conducting network simulations benchmarking the proposed method against established approaches, we con\ufb01rmed that in practical scenarios the optimizations we proposed achieve important reductions in network utiliza- tion, or alternatively network complexity and cost (by re- ducing the top level of the network such that only half the bisection bandwidth remains available), with little impact on performance. Furthermore, we demonstrated that in the half-bisection network scenario, where a cost-e\ufb00ective net- work with only the minimum amount of necessary resources was used, current methods incurred signi\ufb01cant performance penalties, (in the 12% to 40% range for XOR and in the 12% to 140% range for LIN) whereas our method only diverged by at most 12% from optimal performance. In conclusion, our method enables new design options for fat tree networks and o\ufb00ers a viable way of maintaining close to ideal application performance levels with important re- ductions in cost. 8. REFERENCES [1] A. Alexandrov, M. F. Ionescu, K. E. Schauser, and C. Scheiman. LogGP: incorporating long messages into the LogP model - one step closer towards a realistic model for parallel computation. In Proceedings of the 7thannual ACM symposium on Parallel algorithms and architectures (SPAA) , pages 95\u2013105, NY, USA, 1995. ACM.[2] G. Almasi, P. Hargrove, I. Gabriel, and T. Y. Zheng. UPC collectives library 2.0. In 5thConference on Partitioned Global Address Space Programming Models , 2011. [3] P. Balaji, D. Buntinas, D. Goodell, W. Gropp, T. Hoe\ufb02er, S. Kumar, E. Lusk, R. Thakur, and J. L. Trae\ufb00. MPI on Millions of Cores. Parallel Processing Letters (PPL) , 21(1):45\u201360, Mar. 2011. [4] J. Bruck, C.-T. Ho, E. Upfal, S. Kipnis, and D. Weathersby. E\ufb03cient algorithms for all-to-all communications in multiport message-passing systems. IEEE Trans. Parallel Distrib. Syst. , 8(11):1143\u20131156, Nov. 1997. [5] E. Chan, M. Heimlich, A. Purkayastha, and R. van de Geijn. On optimizing collective communication. In Cluster Computing, 2004 IEEE International Conference on , pages 145 \u2013 155, sept. 2004. [6] R. Fiedler. Preparing Applications for Sustained Petascale Performance, 2011. [7] J. Flich, M. P. Malumbres, P. L\u00b4 opez, and J. Duato. Improving routing performance in Myrinet networks. InProc. of the 14thInternational Parallel and Distributed Processing Symposium , pages 27\u201332, Los Alamitos, CA, USA, 2000. IEEE Computer Society. [8] P. Geo\ufb00ray and T. Hoe\ufb02er. Adaptive routing strategies for modern high performance networks. In High Performance Interconnects, 2008. HOTI \u201908. 16th IEEE Symposium on , pages 165\u2013172, Aug. 2008. [9] S. Gorlatch. Send-receive considered harmful: Myths and realities of message passing. ACM Trans. Program. Lang. Syst. , 26(1):47\u201356, Jan. 2004. [10] R. I. Greenberg and C. E. Leiserson. Randomized routing on fat-trees. In Proc. of the 26thAnnual Symposium on the Foundations of Computer Science , pages 241\u2013249, 1985. [11] T. Hoe\ufb02er and A. Lumsdaine. Optimizing non-blocking collective operations for In\ufb01niBand. In IEEE International Symposium on Parallel and Distributed Processing, IPDPS 2008 , pages 1 \u20138, 2008. [12] T. Hoe\ufb02er, A. Lumsdaine, and W. Rehm. Implementation and performance analysis of non-blocking collective operations for MPI. In Proceedings of the 2007 ACM/IEEE Conference on Supercomputing, SC \u201907 , pages 1 \u201310, nov. 2007. [13] P. Husbands and J. C. Hoe. MPI-StarT: delivering network performance to numerical applications. In Proceedings of the 1998 ACM/IEEE conference on Supercomputing (CDROM) , Supercomputing \u201998, pages 1\u201315, Washington, DC, USA, 1998. [14] H. Kariniemi. On-Line Recon\ufb01gurable Extended Generalized Fat Tree Network-on-Chip for Multiprocessor System-on-Chip Circuits . PhD thesis, Tampere University of Technology, 2006. [15] M. A. Kinsy, M. H. Cho, T. Wen, E. Suh, M. van Dijk, and S. Devadas. Application-aware deadlock-free oblivious routing. In Proceedings of the 36th annual international symposium on Computer architecture , ISCA \u201909, pages 208\u2013219, New York, NY, USA, 2009. ACM. [16] C. Kurmann, F. Rauch, and T. M. Stricker. Cost/performance tradeo\ufb00s in network interconnects for clusters of commodity PCs. In Proceedings of the 17th International Symposium on Parallel and Distributed Processing , IPDPS \u201903, pages 196.2\u2013, Washington, DC, USA, 2003. IEEE Computer Society. [17] C. Leiserson et al. The network architecture of the Connection Machine CM-5. In Proc. of the Fourth Annual ACM Symposium on Parallel Algorithms and Architectures , pages 272\u2013285, San Diego, CA, USA, June 1992. [18] X.-Y. Lin, Y.-C. Chung, and T.-Y. Huang. A multiple LID routing scheme for fat-tree-based In\ufb01niBand networks. Proc. of the 18thInternational Parallel and Distributed Processing Symposium , pages 11\u2013, 2004. [19] A. Mamidala, R. Kumar, D. De, and D. Panda. MPI collectives on modern multicore clusters: Performance optimizations and communication characteristics. In Cluster Computing and the Grid, 2008. CCGRID \u201908. 8th IEEE International Symposium on , pages 130 \u2013137, may 2008. [20] J. C. Mart\u00b4 \u0131nez, J. Flich, A. Robles, P. L\u00b4 opez, and J. Duato. Supporting fully adaptive routing in In\ufb01niBand networks. In Proceedings of the 17th International Symposium on Parallel and Distributed Processing , IPDPS \u201903, pages 44.1\u2013, Washington, DC, USA, 2003. IEEE Computer Society. [21] J. Mellor-Crummey, L. Adhianto, W. N. Scherer, III, and G. Jin. A new vision for coarray fortran. In Proceedings of the 3thConference on Partitioned Global Address Space Programing Models , PGAS \u201909, pages 5:1\u20135:9, New York, NY, USA, 2009. ACM. [22] C. Minkenberg, W. Denzel, G. Rodriguez, and R. Birke. End-to-end modeling and simulation of high-performance computing systems. Springer Proceedings in Physics: Use Cases of Discrete Event Simulation: Appliance and Research , page 201, 2012. [23] P. Moin and K. Mahesh. Direct numerical simulation: a tool in turbulence research. Annual Review of Fluid Mechanics , 30(1):539\u2013578, 1998. [24] C. A. Moritz and M. I. Frank. LoGPC: modeling network contention in message-passing programs. SIGMETRICS Perform. Eval. Rev. , 26(1):254\u2013263, June 1998. [25] MPI Forum. MPI: A Message-Passing Interface Standard. Version 3.0, September 2012. [26] S. R. \u00a8Ohring, M. Ibel, S. K. Das, and M. J. Kumar. On generalized fat trees. In Proceedings of the 9th International Parallel Processing Symposium , page 37, Washington, DC, USA, 1995. IEEE Computer Society. [27] F. Petrini and M. Vanneschi. A comparison of wormhole-routed interconnection networks. In Proc. 3thInternational Conference on Computer Science and Informatics , NC, USA, Mar. 1997. [28] F. Petrini and M. Vanneschi. k -ary n -trees: High performance networks for massively parallel architectures. IPPS, 00:87, 1997. [29] J. Pje\u02c7 sivac-Grbovi\u00b4 c, T. Angskun, G. Bosilca, G. Fagg, E. Gabriel, and J. Dongarra. Performance analysis of mpi collective operations. Cluster Computing , 10(2):127\u2013143, 2007. [30] S. Ranka, J.-C. Wang, and G. C. Fox. Static and run-time algorithms for all-to-many personalized communication on permutation networks. IEEETrans. Parallel Distrib. Syst. , 5(12):1266\u20131274, Dec. 1994. [31] C. G. Requena, F. G. Villam\u00b4 on, M. E. G\u00b4 omez, P. L\u00b4 opez, and J. Duato. Deterministic versus adaptive routing in fat-trees. Proc. of the 21stParallel and Distributed Processing Symposium, 2007 , pages 1\u20138, Mar. 2007. [32] P. Sack and W. Gropp. Faster topology-aware collective algorithms through non-minimal communication. In Proceedings of the 17th ACM SIGPLAN symposium on Principles and Practice of Parallel Programming , PPoPP \u201912, pages 45\u201354, New York, NY, USA, 2012. ACM. [33] M. Schroeder, A. Birrell, M. Burrows, H. Murray, R. Needham, T. Rodehe\ufb00er, E. Satterthwaite, and C. Thacker. Autonet: a high-speed, self-con\ufb01guring local area network using point-to-point links. Selected Areas in Communications, IEEE Journal on , 9(8):1318 \u20131335, oct 1991. [34] S. Sistare, R. vandeVaart, and E. Loh. Optimization of MPI collectives on clusters of large-scale SMP\u2019s. In Proceedings of the 1999 ACM/IEEE conference on Supercomputing (CDROM) , Supercomputing \u201999, New York, NY, USA, 1999. ACM. [35] R. Thakur, R. Rabenseifner, and W. Gropp. Optimization of collective communication operations in MPICH. IJHPCA , 19(1):49\u201366, 2005. [36] L. G. Valiant. A bridging model for parallel computation. Commun. ACM , 33(8):103\u2013111, Aug. 1990. [37] J. J. Willcock, T. Hoe\ufb02er, N. G. Edmonds, and A. Lumsdaine. Active pebbles: parallel programming for data-driven applications. In Proceedings of the international conference on Supercomputing , ICS \u201911, pages 235\u2013244, New York, NY, USA, 2011. ACM. [38] M. Xie, Y. Lu, L. Liu, H. Cao, and X. Yang. Implementation and evaluation of network interface and message passing services for TianHe-1A supercomputer. In Proceedings of the 2011 IEEE 19th Annual Symposium on High Performance Interconnects , HOTI \u201911, pages 78\u201386, Washington, DC, USA, 2011. IEEE Computer Society. [39] W. Yu, D. K. Panda, and D. Buntinas. Scalable, high-performance nic-based all-to-all broadcast over Myrinet/GM. In Proceedings of the 2004 IEEE International Conference on Cluster Computing , CLUSTER \u201904, pages 125\u2013134, Washington, DC, USA, 2004. IEEE Computer Society. [40] E. Zahavi. Fat-trees routing and node ordering providing contention free tra\ufb03c for MPI global collectives. In IPDPS Workshops , pages 761\u2013770. IEEE, 2011. [41] E. Zahavi, G. Johnson, D. J. Kerbyson, and M. Lang. Optimized In\ufb01niBand fat-tree routing for shift all-to-all communication pattern. In International Supercomputing Conference (ISC07) , Dresden, Germany, June 2007. [42] E. Zahavi, G. Johnson, D. J. Kerbyson, and M. Lang. Optimized In\ufb01niBand(TM) fat-tree routing for shift all-to-all communication patterns. Concurr. Comput. : Pract. Exper. , 22(2):217\u2013231, Feb. 2010.",
                    "embeddings": {
                        "pdf": {
                            "embeddings": [
                                [
                                    248,
                                    105,
                                    9,
                                    94,
                                    4,
                                    163,
                                    145,
                                    90,
                                    208,
                                    60,
                                    194,
                                    221,
                                    93,
                                    97,
                                    125,
                                    49,
                                    39,
                                    107,
                                    103,
                                    113,
                                    148,
                                    231,
                                    151,
                                    169,
                                    64,
                                    115,
                                    35,
                                    46,
                                    109,
                                    125,
                                    59,
                                    82,
                                    220,
                                    108,
                                    120,
                                    217,
                                    123,
                                    66,
                                    110,
                                    92,
                                    36,
                                    150,
                                    121,
                                    44,
                                    213,
                                    211,
                                    168,
                                    103,
                                    210,
                                    72,
                                    253,
                                    234,
                                    121,
                                    140,
                                    24,
                                    69,
                                    32,
                                    42,
                                    93,
                                    58,
                                    122,
                                    9,
                                    57,
                                    20,
                                    21,
                                    150,
                                    32,
                                    196,
                                    85,
                                    223,
                                    68,
                                    188,
                                    144,
                                    61,
                                    226,
                                    168,
                                    158,
                                    100,
                                    52,
                                    109,
                                    237,
                                    93,
                                    21,
                                    8,
                                    113,
                                    64,
                                    32,
                                    56,
                                    156,
                                    156,
                                    231,
                                    216,
                                    156,
                                    5,
                                    158,
                                    152,
                                    166,
                                    17,
                                    183,
                                    222,
                                    234,
                                    160,
                                    159,
                                    126,
                                    146,
                                    5,
                                    210,
                                    120,
                                    239,
                                    166,
                                    7,
                                    3,
                                    205,
                                    218,
                                    28,
                                    45,
                                    123,
                                    214,
                                    179,
                                    103,
                                    79,
                                    67,
                                    150,
                                    207,
                                    194,
                                    67,
                                    134,
                                    58
                                ]
                            ]
                        }
                    }
                },
                {
                    "path": "/Users/shreyanshrai/Desktop/tidbtestfolder/2 kittens.jpeg",
                    "type": ".jpeg",
                    "caption": "two pictures of a cat sitting in a basket next to another cat",
                    "ocr_text": "",
                    "embeddings": {
                        "caption": {
                            "embeddings": [
                                [
                                    97,
                                    164,
                                    205,
                                    254,
                                    156,
                                    139,
                                    160,
                                    62,
                                    107,
                                    67,
                                    133,
                                    151,
                                    47,
                                    100,
                                    245,
                                    1,
                                    237,
                                    77,
                                    34,
                                    87,
                                    127,
                                    37,
                                    117,
                                    168,
                                    83,
                                    121,
                                    50,
                                    223,
                                    125,
                                    231,
                                    253,
                                    118,
                                    161,
                                    241,
                                    74,
                                    9,
                                    134,
                                    5,
                                    77,
                                    159,
                                    244,
                                    129,
                                    169,
                                    133,
                                    115,
                                    250,
                                    230,
                                    168,
                                    80,
                                    0,
                                    247,
                                    149,
                                    70,
                                    188,
                                    218,
                                    143,
                                    224,
                                    132,
                                    69,
                                    237,
                                    18,
                                    103,
                                    63,
                                    129,
                                    153,
                                    150,
                                    16,
                                    242,
                                    21,
                                    143,
                                    27,
                                    140,
                                    17,
                                    241,
                                    36,
                                    40,
                                    209,
                                    50,
                                    139,
                                    217,
                                    227,
                                    219,
                                    52,
                                    18,
                                    246,
                                    128,
                                    15,
                                    5,
                                    38,
                                    16,
                                    224,
                                    235,
                                    107,
                                    12,
                                    184,
                                    144,
                                    15,
                                    225,
                                    118,
                                    215,
                                    214,
                                    194,
                                    132,
                                    122,
                                    91,
                                    197,
                                    223,
                                    102,
                                    62,
                                    44,
                                    148,
                                    58,
                                    247,
                                    154,
                                    238,
                                    44,
                                    123,
                                    39,
                                    179,
                                    177,
                                    105,
                                    124,
                                    192,
                                    29,
                                    155,
                                    3,
                                    62,
                                    150
                                ]
                            ]
                        },
                        "ocr": {
                            "embeddings": [
                                [
                                    11,
                                    233,
                                    0,
                                    92,
                                    24,
                                    176,
                                    174,
                                    144,
                                    219,
                                    70,
                                    213,
                                    251,
                                    95,
                                    105,
                                    156,
                                    241,
                                    12,
                                    79,
                                    197,
                                    65,
                                    69,
                                    171,
                                    241,
                                    167,
                                    82,
                                    89,
                                    34,
                                    111,
                                    93,
                                    255,
                                    20,
                                    77,
                                    83,
                                    88,
                                    26,
                                    29,
                                    198,
                                    69,
                                    109,
                                    189,
                                    70,
                                    143,
                                    25,
                                    229,
                                    183,
                                    130,
                                    181,
                                    163,
                                    212,
                                    10,
                                    173,
                                    134,
                                    119,
                                    172,
                                    154,
                                    193,
                                    41,
                                    234,
                                    202,
                                    189,
                                    208,
                                    115,
                                    77,
                                    132,
                                    101,
                                    151,
                                    8,
                                    128,
                                    57,
                                    83,
                                    192,
                                    175,
                                    16,
                                    185,
                                    180,
                                    40,
                                    190,
                                    38,
                                    48,
                                    220,
                                    143,
                                    159,
                                    13,
                                    224,
                                    176,
                                    98,
                                    238,
                                    125,
                                    20,
                                    36,
                                    189,
                                    78,
                                    27,
                                    5,
                                    38,
                                    153,
                                    233,
                                    186,
                                    31,
                                    29,
                                    177,
                                    166,
                                    167,
                                    238,
                                    202,
                                    4,
                                    223,
                                    164,
                                    138,
                                    118,
                                    5,
                                    147,
                                    15,
                                    235,
                                    222,
                                    8,
                                    119,
                                    255,
                                    179,
                                    215,
                                    11,
                                    242,
                                    150,
                                    28,
                                    19,
                                    195,
                                    198,
                                    60
                                ]
                            ]
                        },
                        "combined": {
                            "embeddings": [
                                [
                                    97,
                                    164,
                                    205,
                                    254,
                                    156,
                                    139,
                                    160,
                                    62,
                                    107,
                                    67,
                                    133,
                                    151,
                                    47,
                                    100,
                                    245,
                                    1,
                                    237,
                                    77,
                                    34,
                                    87,
                                    127,
                                    37,
                                    117,
                                    168,
                                    83,
                                    121,
                                    50,
                                    223,
                                    125,
                                    231,
                                    253,
                                    118,
                                    161,
                                    241,
                                    74,
                                    9,
                                    134,
                                    5,
                                    77,
                                    159,
                                    244,
                                    129,
                                    169,
                                    133,
                                    115,
                                    250,
                                    230,
                                    168,
                                    80,
                                    0,
                                    247,
                                    149,
                                    70,
                                    188,
                                    218,
                                    143,
                                    224,
                                    132,
                                    69,
                                    237,
                                    18,
                                    103,
                                    63,
                                    129,
                                    153,
                                    150,
                                    16,
                                    242,
                                    21,
                                    143,
                                    27,
                                    140,
                                    17,
                                    241,
                                    36,
                                    40,
                                    209,
                                    50,
                                    139,
                                    217,
                                    227,
                                    219,
                                    52,
                                    18,
                                    246,
                                    128,
                                    15,
                                    5,
                                    38,
                                    16,
                                    224,
                                    235,
                                    107,
                                    12,
                                    184,
                                    144,
                                    15,
                                    225,
                                    118,
                                    215,
                                    214,
                                    194,
                                    132,
                                    122,
                                    91,
                                    197,
                                    223,
                                    102,
                                    62,
                                    44,
                                    148,
                                    58,
                                    247,
                                    154,
                                    238,
                                    44,
                                    123,
                                    39,
                                    179,
                                    177,
                                    105,
                                    124,
                                    192,
                                    29,
                                    155,
                                    3,
                                    62,
                                    150
                                ]
                            ]
                        }
                    }
                },
                {
                    "path": "/Users/shreyanshrai/Desktop/tidbtestfolder/IMT2019004_IMT2019075_MT2021002_CG_PA3_Report.pdf",
                    "type": ".pdf",
                    "caption": "",
                    "ocr_text": "CS606 Computer Graphics   Term 2 2021 -22  Programming Assignment 3          3D Rendering with Lighting , Shading,   and Rotation using Quaternions             Contributors:   ADRIJ SHARMA  - IMT2019004   SAMAKSH DHINGRA  - IMT2019075   ABHAY ARAVINDA  - MT2021002     ANSWERS   1. What are your observations of the distance attenuation terms used for lighting on the sphere and  teapot/urn models?   \u27a2 Attenuation calculates the fraction of the original light intensity that is utili zed to colour  a  pixe l.   \u27a2 The longer  and further  light go from its source, the weaker it becomes.   \u27a2 The primary logic behind  attenuation  is to create a function that is inversely proportional to a  point's distance from the light source. The output would decrease as the distance between the  two points grew .  \u27a2 The attenuation is proportional to 1/d2. However, employing the 1/d2 function causes light to  progressively dim  very rapidly .   \u27a2 Instead of 1/d2, we use  1/(a + bd + cd2). We strive to set the values  of a, b, and c in a range such  that the attenuation term becomes  proportional to 1/d. It took a lot of trial and error to figure  out the right coefficient values  for a, b and c.     2. What are your observations about the change in the shading model on the two meshes?   \u27a2 The appr oach of two shading approaches highlights the differences between them.   \u27a2 The surface s of the objects appear to be smoother and shinier in the Phong model as compared  to the Goura ud model.   \u27a2 The specular highlight spot on the object s appeared to be  sharper in the case of the Phong   model as compared to the Goura ud model.  The spot was very much  distorted  (polygons)  in  the Gouraud  model .  \u27a2 During the use of mesh for the 3 -D model s \u2013   \u2022 In Gouraud shading , specular highlights present in the middle of a triangle  are not visible .  This is because  Gouraud shading interpolates the effects of light on the vertices.   \u2022 This problem is resolved  in the case of the  Phong shading  model  because the calculation of  effects of light is being calculated at each potential fragment of the surface.   \u27a2 Phong is computationally more expensive because the effect of light is computed at each point  instead of using linear interpolation of light effects  calculated at the vertices only.   \u27a2 Overall , Phong shading gives comparatively more  accurate results than Gouraud shading.     3. What are your observations of the individual components of reflection in the Blinn -Phong  model  for each of the mesh models you have used?   Phong lighting model diffuse reflection of rough surfaces and specular reflection of shiny  surfaces.   \u27a2 Ambient: The ambient lighting is always visible and is not affected by attenuation. If the  coefficient of ambient light is 1, the model appears flat . Ambient lighting is independent of the  model we are using.   \u27a2 Diffuse: A property of diffuse light is th at the  effect of light on a surface that can be seen better  if the light source is kept parallel  to the normal to the surface rather than at an angle to the  normal.  This difference cannot be easily observed in the case of a sphere because the normal a t  a point will be parallel to the light source even when the sphere is rotated. This is not true in the  case of the teapot. The effect of diffuse light can be seen on the bottom surface of the sphere on  rotating.   \u27a2 Specular: When the surface is less shi ny, the specular reflection results in a rough specular area.  Causes a bright spot of light to occur on both object s. The spot looks flat in Gouraud shading,  whereas, it looks smoother in Phong shading  in both the teapot and the sphere .                        Gouraud Shading Model \u2013 Polygon like (distorted) specular highlight spot                           Phong Shading Model \u2013 Smooth specular highlight spot   CODE SPECIFICS  & APPROACH:   1. Lighting  and Shading   \u27a2 Point lighted on a single object \u2013 Interpolat ion of the normals  for each of the points present on  the mesh enables the effect of a more natural object re flecting light from its surface.    \u27a2 We made a separate light class for hand ling the effects of lighting.   \u27a2 Each light object has its colo ur (ambient, diffuse, specular), position, and attenuation factor.   \u27a2 Each mesh object has its colo ur and coeffici ents of light colo urs k a, kd, ks.  \u27a2 The combination of the colour  of light and the colour  of the object will give the resultant  colour .  \u27a2 Directional lighting \u2013   \u2022 Here we learnt about the use of normal in determining the effect of lighting.   \u2022 Directional lighting acts on each face of the object.   \u2022 We calculate the dot product of the normal to a face with the direction of the light and add  this result to the colo ur of the object to observe the overall effect.   \u27a2 In the Blinn Phong model , we also have to pass the position of the eye/camera.  The shader  implemented for this model corresponds to the Phong shading method, in which we calculate  the normals and the colour  values in the fragment shader.   \u27a2 In the Gouraud  shading , we perform  all the colour  calculations in the vertex shader and then  send the final colour  after the completion  of all the calculations calculated colour  to the  fragment  shader.     2. Quaternions   \u27a2 The r otation has been implemented using quaternions   \u27a2 a system of rotation for the cameras using mouse drag in all directions, though that used basic  geometry to move a point along the sphere.   \u27a2 Two things were required \u2013 axis of rotation, angle to rotate the vector about that   \u27a2 Logic is similar to camera rotation . When our mouse  from A( X1, Y1) to B( X2, Y2) on the  screen  and we have a sphere of unit  radius present at the origin, we need to find the corresponding  points on the sphere  to A and B.   \u27a2 We assume the screen is a plane sheet present  at some positive Z value.  The points on this  plane  can be mapped onto the sphere by normalizing the coordinates  A and B with z - coordinate as Z.   \u27a2 Now, we have two points A' and B' on the sphere, between which we have to perform the  transformation. These two points are vectors with on e endpoint as the cent re of the sphere.   \u27a2 We can  find the axis of rotation to go from A' to B' by taking the cross product  of these 2  vectors . The angle of rotat ion can be found using the dot product of these two vectors.   \u27a2 For using the mouse as a trackball , we  keep track of the starting point of the mouse  down A  and the other point B.     3. Multiple Light Sources   \u27a2 We need to access the position of all the lights and the colour s as well.   \u27a2 The position values of the lights get autom atically updated while translating.   \u27a2 In the shader, we created a struct for holding all these values to make it more modular.   \u27a2 We created an array of structs of all the light sources and passed it to each of the mesh objects.   \u27a2 To get the resultant colour , we kept adding colour s from all the light sources.     4. Bounding Box Constraints   \u27a2 We use the inverse of the transformation matrix and multiply it with the position vector of the  light source to change it into model coordinates.   \u27a2 Then, we  compute the bounding box in model coordinates by finding the minimum and  maximum x,  y, and z values among all vertices in the mesh and multiplying it by 1.25. Direct  multiplication is fine because the object is originally centred at the origin in model coordinates.   \u27a2 Comparison of light coordinates with the bounding box coordinates checks whether the light   is inside the bounding box.     LIST OF THINGS WE LEARNT   1. The l ighting of 3D models.   2. Properties of light \u2013 specular, diffuse, ambient .  3. One single source of light can change the animation from 2D to 3D.   4. Manipulation of models using the two different shading methods  and the difference between the  two shading models .  5. Debugging .    REFERENCES   1. Documentations:   \u27a2 https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer   \u27a2 https://glmatrix.net/docs/module -mat4.html   \u27a2 https://glmatrix.net/docs/module -mat4.html#.perspective   \u27a2 https://glmatrix.net/docs/module -mat4.html#.lookAt   \u27a2 https://webglfundamentals.org/webgl/frustum -diagram.html   \u27a2 https://developer.mozilla.org/en - US/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL   \u27a2 http://www.songho.ca/opengl/gl_transform.html   \u27a2 http://www.songho.ca/opengl/gl_projectionmatrix.html   \u27a2 https://www.scratchapixel.com/lessons/3d -basic -rendering/3d -viewing -pinhole -camera   \u27a2 https://learnopengl.com/Lighting/Basic -Lighting   \u27a2 https://learnopengl.com/Lighting/Multiple -lights   \u27a2 http://www.opengl -tutorial.org/intermediate -tutorials/tutorial -17-quaternions/     2. Videos   \u27a2 https://www.youtube.com/watch?v= - nqIzV9OuQM&list=RDCMUCRQCzM ftIUElX03kHjV4rmQ&start_radio=1   \u27a2 https://www.youtube.com/watch?v= -nqIzV9OuQM&t=810s   \u27a2 https://www.youtube.com/watch?v=Y5eHAfuO9aY&t=491s   \u27a2 https://www.youtube.com/watch?v= MF1qEhBSfq4&list=PLa1F2ddGya_ - UvuAqHAksYnB0qL9yWDO6&index=1   \u27a2 https://www.youtube.com/watch?v=nIoXOplUvAw&list=PLjEaoINr3zgFX8ZsChQVQsuDSj EqdWMAD     3. Reposit ories   \u27a2 https://github.com/Amit -Tomar/T2 -21-CS-606  \u27a2 https://github.com/invent -box/Learn -WebGL   \u27a2 https://github.com/frenchtoast747/webgl -obj-loader    ",
                    "embeddings": {
                        "pdf": {
                            "embeddings": [
                                [
                                    32,
                                    120,
                                    140,
                                    109,
                                    186,
                                    166,
                                    192,
                                    188,
                                    197,
                                    8,
                                    83,
                                    128,
                                    125,
                                    82,
                                    21,
                                    251,
                                    36,
                                    77,
                                    64,
                                    35,
                                    212,
                                    43,
                                    179,
                                    138,
                                    92,
                                    93,
                                    226,
                                    93,
                                    25,
                                    173,
                                    62,
                                    88,
                                    198,
                                    240,
                                    3,
                                    21,
                                    74,
                                    129,
                                    76,
                                    90,
                                    134,
                                    7,
                                    123,
                                    201,
                                    48,
                                    226,
                                    162,
                                    229,
                                    138,
                                    15,
                                    241,
                                    131,
                                    57,
                                    172,
                                    94,
                                    77,
                                    8,
                                    182,
                                    121,
                                    128,
                                    65,
                                    106,
                                    121,
                                    90,
                                    59,
                                    156,
                                    161,
                                    212,
                                    17,
                                    238,
                                    94,
                                    143,
                                    24,
                                    125,
                                    208,
                                    105,
                                    227,
                                    32,
                                    23,
                                    232,
                                    163,
                                    187,
                                    158,
                                    64,
                                    55,
                                    164,
                                    203,
                                    44,
                                    63,
                                    133,
                                    235,
                                    214,
                                    136,
                                    161,
                                    158,
                                    145,
                                    142,
                                    47,
                                    119,
                                    100,
                                    124,
                                    84,
                                    13,
                                    234,
                                    230,
                                    5,
                                    211,
                                    121,
                                    228,
                                    39,
                                    12,
                                    11,
                                    199,
                                    217,
                                    140,
                                    12,
                                    127,
                                    16,
                                    147,
                                    192,
                                    76,
                                    46,
                                    84,
                                    26,
                                    171,
                                    90,
                                    6,
                                    120
                                ]
                            ]
                        }
                    }
                },
                {
                    "path": "/Users/shreyanshrai/Desktop/tidbtestfolder/1.png",
                    "type": ".png",
                    "caption": "a close up of a computer screen with a bunch of twitter posts",
                    "ocr_text": "View Help it fy Wry Bb Ov \u00a5 Br A G& Pv. F Quicksteps vy ORead/Unead Ov Ev \u00a9 \u00a9- Rr \u00a9 5674 ms 27 ourite 5674 27 ms Items 24 ail 117 \u2018ation History 1ew folder -olders Oo new Groups SV HS Focused Other O Other: New messages (1) Staff Officer to Dean-llITB SheerlID Verification Y + Congratulations: your... Sat 22:15 Congratulations! We have succes... Today huggingface [Hugging Face] Click this... 19:55 Confirm your email address by cli... huggingface [Hugging Face] Click this |... 19:28 Confirm your email address by cli... SAC 2 E-cell weekly newsletter-3 15:27 No preview is available. BB The 5th Aug Ma... SAC Calling All Innovators: Sh... 14:07 Dear All, | hope this message fin... Yesterday HP Online Store Welcome to the HP St... Sat 21:41 View online Thank you for signin... [Hugging Face] Click this link to confirm your email address huggingface<website@huggingface.co> 30 OA & A To: IMT2020501 Shreyansh Rajeeva Rai Sun 11/ @ Some content in this message has been blocked because the sender isn't in your Safe senders list. Trust sender Show b Confirm your email address by clicking on this link: https://huggingface.co/email_confirmation/pQtaszYEEAYXeRRMvsLKuLXWTifs Hugging Face \u2014 The AI community building the building the future future. \u00ab> The Al community huggingface.co If you didn't create a Hugging Face account, you can ignore this email.",
                    "embeddings": {
                        "caption": {
                            "embeddings": [
                                [
                                    59,
                                    220,
                                    132,
                                    93,
                                    8,
                                    161,
                                    144,
                                    62,
                                    109,
                                    149,
                                    83,
                                    187,
                                    85,
                                    97,
                                    237,
                                    69,
                                    87,
                                    233,
                                    101,
                                    201,
                                    212,
                                    83,
                                    93,
                                    99,
                                    118,
                                    75,
                                    38,
                                    71,
                                    241,
                                    119,
                                    126,
                                    216,
                                    79,
                                    240,
                                    90,
                                    77,
                                    208,
                                    98,
                                    77,
                                    95,
                                    2,
                                    135,
                                    219,
                                    75,
                                    214,
                                    112,
                                    148,
                                    187,
                                    248,
                                    79,
                                    181,
                                    213,
                                    17,
                                    172,
                                    24,
                                    202,
                                    168,
                                    179,
                                    117,
                                    186,
                                    70,
                                    217,
                                    76,
                                    6,
                                    115,
                                    146,
                                    142,
                                    170,
                                    21,
                                    115,
                                    1,
                                    174,
                                    55,
                                    188,
                                    64,
                                    40,
                                    118,
                                    6,
                                    84,
                                    113,
                                    227,
                                    105,
                                    157,
                                    147,
                                    58,
                                    224,
                                    94,
                                    38,
                                    70,
                                    81,
                                    233,
                                    73,
                                    190,
                                    227,
                                    34,
                                    189,
                                    5,
                                    187,
                                    244,
                                    152,
                                    166,
                                    128,
                                    131,
                                    223,
                                    91,
                                    196,
                                    151,
                                    117,
                                    162,
                                    164,
                                    36,
                                    155,
                                    223,
                                    248,
                                    92,
                                    175,
                                    111,
                                    182,
                                    176,
                                    41,
                                    77,
                                    147,
                                    212,
                                    47,
                                    25,
                                    223,
                                    46,
                                    61
                                ]
                            ]
                        },
                        "ocr": {
                            "embeddings": [
                                [
                                    183,
                                    216,
                                    164,
                                    205,
                                    136,
                                    99,
                                    144,
                                    30,
                                    85,
                                    13,
                                    227,
                                    55,
                                    93,
                                    104,
                                    84,
                                    243,
                                    94,
                                    163,
                                    119,
                                    91,
                                    214,
                                    135,
                                    227,
                                    233,
                                    114,
                                    91,
                                    34,
                                    119,
                                    67,
                                    126,
                                    43,
                                    221,
                                    209,
                                    224,
                                    74,
                                    221,
                                    122,
                                    66,
                                    109,
                                    28,
                                    38,
                                    135,
                                    63,
                                    100,
                                    178,
                                    114,
                                    160,
                                    169,
                                    192,
                                    11,
                                    253,
                                    212,
                                    49,
                                    172,
                                    26,
                                    135,
                                    160,
                                    238,
                                    117,
                                    140,
                                    66,
                                    255,
                                    41,
                                    84,
                                    117,
                                    150,
                                    0,
                                    196,
                                    83,
                                    79,
                                    49,
                                    46,
                                    24,
                                    177,
                                    192,
                                    108,
                                    154,
                                    166,
                                    38,
                                    244,
                                    203,
                                    121,
                                    148,
                                    201,
                                    50,
                                    33,
                                    12,
                                    55,
                                    76,
                                    170,
                                    204,
                                    248,
                                    60,
                                    166,
                                    63,
                                    173,
                                    172,
                                    187,
                                    183,
                                    153,
                                    146,
                                    146,
                                    135,
                                    250,
                                    155,
                                    84,
                                    155,
                                    105,
                                    230,
                                    12,
                                    70,
                                    31,
                                    77,
                                    234,
                                    28,
                                    13,
                                    127,
                                    215,
                                    145,
                                    241,
                                    72,
                                    54,
                                    192,
                                    74,
                                    58,
                                    149,
                                    98,
                                    48
                                ]
                            ]
                        },
                        "combined": {
                            "embeddings": [
                                [
                                    187,
                                    208,
                                    164,
                                    205,
                                    136,
                                    163,
                                    146,
                                    30,
                                    85,
                                    5,
                                    243,
                                    51,
                                    93,
                                    105,
                                    212,
                                    99,
                                    94,
                                    227,
                                    103,
                                    89,
                                    212,
                                    135,
                                    111,
                                    105,
                                    114,
                                    123,
                                    34,
                                    87,
                                    67,
                                    126,
                                    43,
                                    220,
                                    215,
                                    224,
                                    74,
                                    205,
                                    90,
                                    66,
                                    109,
                                    92,
                                    34,
                                    135,
                                    59,
                                    96,
                                    240,
                                    112,
                                    160,
                                    171,
                                    216,
                                    11,
                                    253,
                                    92,
                                    49,
                                    172,
                                    18,
                                    131,
                                    160,
                                    239,
                                    117,
                                    140,
                                    66,
                                    221,
                                    41,
                                    68,
                                    119,
                                    150,
                                    130,
                                    196,
                                    87,
                                    95,
                                    49,
                                    174,
                                    17,
                                    177,
                                    64,
                                    104,
                                    154,
                                    38,
                                    38,
                                    244,
                                    203,
                                    125,
                                    148,
                                    25,
                                    58,
                                    97,
                                    12,
                                    51,
                                    76,
                                    188,
                                    204,
                                    120,
                                    188,
                                    166,
                                    63,
                                    173,
                                    172,
                                    187,
                                    183,
                                    153,
                                    178,
                                    144,
                                    135,
                                    218,
                                    155,
                                    212,
                                    135,
                                    105,
                                    166,
                                    140,
                                    102,
                                    31,
                                    95,
                                    234,
                                    28,
                                    15,
                                    127,
                                    215,
                                    129,
                                    233,
                                    72,
                                    54,
                                    192,
                                    79,
                                    56,
                                    151,
                                    34,
                                    48
                                ]
                            ]
                        }
                    }
                }
            ]
        }
    ]
}